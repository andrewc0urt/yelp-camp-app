<% layout('/layouts/boilerplate') %>
<script id="search-js" defer src="https://api.mapbox.com/search-js/v1.0.0-beta.21/web.js"></script>

<div class="row">
  <h1 class="text-center mb-3">Add New Campground</h1>

  <div class="col-md-6 offset-md-3">
    <form action="/campgrounds" method="POST" class="validated-form" novalidate enctype="multipart/form-data">
      <div class="mb-3">
        <label for="title" class="form-label">Campground Title</label>
        <input type="text" class="form-control" name="campground[title]" id="title" required />
        <div class="valid-feedback">Looks good!</div>
        <div class="invalid-feedback">Please provide a campground title.</div>
      </div>

      <div class="mb-3">
        <label for="location" class="form-label">Location</label>
        <input type="text" class="form-control" name="campground[location]" id="location" hidden required />
        <div id="mapbox-container">
          <mapbox-geocoder access-token="pk.eyJ1IjoiYXRjNTMxNyIsImEiOiJjbHlzdDN3aDkwbHJhMmtwd3ppeGMwZXR3In0.SIqJ5JKRiqqDMviXsrUASQ" proximity="0,0"> </mapbox-geocoder>
        </div>
        <div class="valid-feedback">Looks good!</div>
        <div class="invalid-feedback">Please provide a location for the campground.</div>
      </div>

      <!-- Hidden input fields to store the GeoJSON geometry type and coordinates -->
      <input type="hidden" id="geometry-type" name="campground[geometry][type]" />
      <input type="hidden" id="geometry-coordinates-0" name="campground[geometry][coordinates][0]" />
      <input type="hidden" id="geometry-coordinates-1" name="campground[geometry][coordinates][1]" />

      <div class="mb-3">
        <label for="price" class="form-label">Campground Price (USD)</label>

        <div class="input-group mb-3">
          <span class="input-group-text">$</span>
          <input type="text" class="form-control" aria-label="Amount (to the nearest dollar)" name="campground[price]" id="price" required />
          <span class="input-group-text">.00</span>
          <div class="valid-feedback">Looks good!</div>
          <div class="invalid-feedback">Please provide a price for the campground.</div>
        </div>
      </div>

      <div class="mb-3">
        <label for="description" class="form-label">Description</label>
        <textarea class="form-control" placeholder="Provide a description of the campground..." name="campground[description]" id="description" required></textarea>
        <div class="valid-feedback">Looks good!</div>
        <div class="invalid-feedback">Please provide a description of the campground.</div>
      </div>

      <!-- allow user to upload an image file for the campground -->
      <!-- <div class="mb-3">
        <label for="image" class="form-label"> Upload Campground Image(s)</label>
        <input type="file" name="image" class="form-control" id="form-file-input" multiple />
        Div container to hold the file names -->
      <!-- <div class="mt-2" id="fileList"></div>
      </div> -->

      <div class="mb-3">
        <label for="image" class="form-label"> Upload Campground Image(s)</label>
        <div class="file-loading">
          <input id="image" name="image" type="file" multiple />
        </div>
      </div>

      <button class="btn btn-primary mb-3" id="add-campground-button">Add Campground</button>
    </form>

    <div class="mb-5">
      <a href="/campgrounds">
        <button class="btn btn-secondary">Go Back</button>
      </a>
    </div>
  </div>
</div>

<!-- Mapbox Geooder API: mapbox-search-js Geocoding -->
<!-- <script>
  const script = document.getElementById("search-js");
  // wait for the Mapbox Search JS script to load before using it
  script.onload = function () {
    // select the MapboxGeocoder instance
    const geocoder = document.querySelector("mapbox-geocoder");

    // set the options property
    geocoder.options = {
      language: "en",
      country: "US",
    };

    // select the div containing the MapboxGeocoder instance
    const mapboxContainer = document.querySelector("#mapbox-container");

    // select the location input element from the form; it is set with a hidden attribute to start
    const locationInputElement = document.querySelector("#location");

    // Function to show the location input element and hide the mapbox-geocoder element
    function showLocationInput() {
      // Remove the "hidden" attribute from the locationInputElement
      // This makes the location input element visible.
      locationInputElement.removeAttribute("hidden");

      // Set the "hidden" attribute on the mapboxContainer element to "true"
      // This hides the mapbox-geocoder element.
      mapboxContainer.setAttribute("hidden", true);
    }

    // Function to hide the location input element and show the mapbox-geocoder element
    function hideLocationInput() {
      // Set the "hidden" attribute on the locationInputElement element to "true"
      // This hides the location input element.
      locationInputElement.setAttribute("hidden", true);

      // Remove the "hidden" attribute from the mapboxContainer element
      // This makes the mapbox-geocoder element visible.
      mapboxContainer.removeAttribute("hidden");

      // Set focus on the mapbox-geocoder element
      // This allows the user to start typing immediately after showing the mapbox-geocoder.
      geocoder.focus();
    }

    // Identify the clear button element within the mapbox-geocoder component
    const clearButton = geocoder.querySelector("[aria-label='Clear']");

    // Add an event listener to the clear button for the 'click' event
    clearButton.addEventListener("click", (event) => {
      // Prevent the default form submission behavior when the clear button is clicked
      event.preventDefault();

      // Clear the value of the location input element
      locationInputElement.value = "";
    });

    // Add an event listener to the mapbox-geocoder element for the 'retrieve' event
    geocoder.addEventListener("retrieve", (e) => {
      // Access the retrieved geojson data from the event details
      const feature = e.detail;

      // Extract the full address from the retrieved feature's properties
      const fullAddress = feature.properties.full_address;

      // Update the location input element's value with the full address
      locationInputElement.value = fullAddress;
    });

    // Select the element with the ID "add-campground-button"
    const addCampgroundButton = document.querySelector("#add-campground-button");

    // Add an event listener to the button for the 'click' event
    addCampgroundButton.addEventListener("click", (clickEvent) => {
      // Check if the location input element has a value (i.e., if a location is selected)
      if (!locationInputElement.value) {
        // If there's no value, call the showLocationInput function to display the input field
        showLocationInput();

        // Uncomment the following line to prevent default form submission if there's no location
        // clickEvent.preventDefault();
      }
    });

    // Add an event listener to the location input element for the 'focus' event
    // This event fires when the user clicks inside the input field
    locationInputElement.addEventListener("focus", () => {
      // Call the hideLocationInput function to hide the input field and show the mapbox-geocoder
      hideLocationInput();
    });
  };
</script> -->
<!-- <script src="/public/js/mapbox-geocode-search.js"></script> -->
<script src="/js/mapbox-geocode-search.js"></script>
